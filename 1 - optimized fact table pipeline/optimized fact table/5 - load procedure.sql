CREATE OR REPLACE PROCEDURE DEMO_DB.DEMO_SCHEMA.PR_LOAD_FACT_PROCESS_RULE_STATUS(MODE STRING)
RETURNS VARCHAR NOT NULL
LANGUAGE SQL
EXECUTE AS CALLER
AS
$$
DECLARE
    STATE VARCHAR DEFAULT 'SUCCESS';
    EVENT_ID VARCHAR DEFAULT '0';
    LOG_RESULT VARCHAR DEFAULT '[]';
    LAST_QUERY_ID VARCHAR DEFAULT '-';
    tableName VARCHAR;
    deltaValue TIMESTAMP_TZ(9);
BEGIN

CALL CENTRAL_DATA.MANAGEMENT.P_ETL_EVENT_START('DEMO_DB.DEMO_SCHEMA.FACT_PROCESS_RULE_STATUS', 'SOURCE_DEMO_DB.SOURCE_DEMO_SCHEMA.LOGISTICA_GLOBAL_PRO_CERTIFICATEMANAGE_RULE_PUBLIC');
EVENT_ID := (SELECT $1 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID())));

SET tableName := (
    SELECT CASE (SELECT current_account()) WHEN 'ORGANIZATION_PRE' 
        THEN 'SOURCE_DEMO_DB.SOURCE_DEMO_SCHEMA.SOURCE_DEMO_TABLE_PRE_ENV'
        ELSE 'SOURCE_DEMO_DB.SOURCE_DEMO_SCHEMA.SOURCE_DEMO_TABLE'
    END
);



-- 0. Inicializar proceso
IF (MODE = 'FULL') THEN
    ALTER TASK IF EXISTS DEMO_DB.DEMO_SCHEMA.TSK_LOAD_FACT_PROCESS_RULE_STATUS SUSPEND;
    TRUNCATE TABLE DEMO_DB.DEMO_SCHEMA.FACT_PROCESS_RULE_STATUS;
    DROP STREAM IF EXISTS DEMO_DB.DEMO_SCHEMA.S_ENTITY_FACT_PROCESS_RULE_STATUS;
END IF;


EXECUTE IMMEDIATE '
    CREATE STREAM IF NOT EXISTS DEMO_DB.DEMO_SCHEMA.S_ENTITY_FACT_PROCESS_RULE_STATUS 
    ON TABLE ' || tableName || '
    SHOW_INITIAL_ROWS = TRUE
    APPEND_ONLY = TRUE';


-- 1. Crear tablas temporales y vistas
CALL DEMO_DB.DEMO_SCHEMA.PR_CREATE_TMP_FACT_PROCESS_RULE_STATUS();
CALL DEMO_DB.DEMO_SCHEMA.PR_CREATE_V_EXTRACT_FACT_PROCESS_RULE_STATUS();
CALL DEMO_DB.DEMO_SCHEMA.PR_CREATE_V_TRANSFORM_1_FACT_PROCESS_RULE_STATUS();
CALL DEMO_DB.DEMO_SCHEMA.PR_CREATE_V_TRANSFORM_2_FACT_PROCESS_RULE_STATUS();


-- 2. Iniciar transacciÃ³n: si hay error, el stream no se consume
BEGIN TRANSACTION;


-- 3. Persistir V_EXTRACT 
INSERT OVERWRITE INTO DEMO_DB.DEMO_SCHEMA.TMP_EXTRACT_FACT_PROCESS_RULE_STATUS 
(
    EVENT_NAME,
    EVENT_PK,
    EVENT_ID,
    INGEST_DATE,
    EVENT_DATE,
    NEXT_EVENT_DATE,
    ID_PROCESS_RULE,
    ID_PROCESS_STATUS,
    ID_ARTICLE,
    ID_RAW,
    ID_COLOR,
    ID_DOCUMENT_TYPE,
    ID_SUPPLIER,
    ID_PROCESS_STATUS_REASON,
    ID_NEGOTIATION_ORDER,
    ID_ORDER,
    ID_BUYING_CENTER,
    ID_RULE_LEVEL,
    ID_SUSTAINABLE_MATERIAL_GROUP,
    DELIVERY_NUMBER,
    ORDER_NUMBER,
    DEADLINE_DATE,
    DATE_CREATED,
    URGENT_DATE,
    IS_URGENT,
    IS_FIRST_ORDER,
    IS_SELF_DECLARATION,
    DOCUMENTLIST,
    MATERIALS,
    COMPOSITION_CODE,
    COMPOSITION_TYPE_CODE,
    GARMENT_ZONE_CODE,
    SUSTAINABLE_MATERIAL_CODE,
    RANK_ORDER
)
SELECT
    EVENT_NAME,
    EVENT_PK,
    EVENT_ID,
    INGEST_DATE,
    EVENT_DATE,
    NEXT_EVENT_DATE,
    ID_PROCESS_RULE,
    ID_PROCESS_STATUS,
    ID_ARTICLE,
    ID_RAW,
    ID_COLOR,
    ID_DOCUMENT_TYPE,
    ID_SUPPLIER,
    ID_PROCESS_STATUS_REASON,
    ID_NEGOTIATION_ORDER,
    ID_ORDER,
    ID_BUYING_CENTER,
    ID_RULE_LEVEL,
    ID_SUSTAINABLE_MATERIAL_GROUP,
    DELIVERY_NUMBER,
    ORDER_NUMBER,
    DEADLINE_DATE,
    DATE_CREATED,
    URGENT_DATE,
    IS_URGENT,
    IS_FIRST_ORDER,
    IS_SELF_DECLARATION,
    DOCUMENTLIST,
    MATERIALS,
    COMPOSITION_CODE,
    COMPOSITION_TYPE_CODE,
    GARMENT_ZONE_CODE,
    SUSTAINABLE_MATERIAL_CODE,
    RANK_ORDER
FROM DEMO_DB.DEMO_SCHEMA.V_EXTRACT_FACT_PROCESS_RULE_STATUS
;


-- 4. Persistir V_TRANSFORM_1 
INSERT OVERWRITE INTO DEMO_DB.DEMO_SCHEMA.TMP_TRANSFORM_1_FACT_PROCESS_RULE_STATUS 
(
    ID_PROCESS_RULE,
    ID_PROCESS_STATUS,
    ID_ARTICLE,
    ID_RAW,
    ID_COLOR,
    ID_DOCUMENT_TYPE,
    ID_SUPPLIER,
    ID_PROCESS_STATUS_REASON,
    ID_NEGOTIATION_ORDER,
    ID_ORDER,
    ID_BUYING_CENTER,
    ID_RULE_LEVEL,
    ID_SUSTAINABLE_MATERIAL_GROUP,
    DELIVERY_NUMBER,
    ORDER_NUMBER,
    DEADLINE_DATE,
    DATE_CREATED,
    URGENT_DATE,
    IS_URGENT,
    IS_FIRST_ORDER,
    IS_SELF_DECLARATION,
    ID_DOCUMENT_PROCESS,
    ID_COMPOSITION,
    ID_COMPOSITION_TYPE,
    ID_PRODUCT_ZONE,
    ID_SUSTAINABLE_MATERIAL,
    ID_SUBARTICLE,
    IS_SUBARTICLE,
    IS_MMPP,
    IS_MATERIAL_ANALYTICS_CANDIDATE,
    START_DATE,
    END_DATE,
    IS_ACTUAL,
    INGEST_DATE,
    EVENT_METADATA,
    ACTION,
    RANK_ORDER
)
SELECT 
    ID_PROCESS_RULE,
    ID_PROCESS_STATUS,
    ID_ARTICLE,
    ID_RAW,
    ID_COLOR,
    ID_DOCUMENT_TYPE,
    ID_SUPPLIER,
    ID_PROCESS_STATUS_REASON,
    ID_NEGOTIATION_ORDER,
    ID_ORDER,
    ID_BUYING_CENTER,
    ID_RULE_LEVEL,
    ID_SUSTAINABLE_MATERIAL_GROUP,
    DELIVERY_NUMBER,
    ORDER_NUMBER,
    DEADLINE_DATE,
    DATE_CREATED,
    URGENT_DATE,
    IS_URGENT,
    IS_FIRST_ORDER,
    IS_SELF_DECLARATION,
    ID_DOCUMENT_PROCESS,
    ID_COMPOSITION,
    ID_COMPOSITION_TYPE,
    ID_PRODUCT_ZONE,
    ID_SUSTAINABLE_MATERIAL,
    ID_SUBARTICLE,
    IS_SUBARTICLE,
    IS_MMPP,
    IS_MATERIAL_ANALYTICS_CANDIDATE,
    START_DATE,
    END_DATE,
    IS_ACTUAL,
    INGEST_DATE,
    EVENT_METADATA,
    ACTION,
    RANK_ORDER
FROM DEMO_DB.DEMO_SCHEMA.V_TRANSFORM_1_FACT_PROCESS_RULE_STATUS
;


-- 5. Guardar Timestamp
SET deltaValue := CURRENT_TIMESTAMP();


-- 6. Persistir DIMs + FLAG cambios
INSERT OVERWRITE INTO DEMO_DB.DEMO_SCHEMA.TMP_DIM_ARTICLE
(
    ID_ARTICLE,
    ID_BRAND,
    ID_SECTION,
    ID_SEASON,
    ID_PRODUCT,
    IS_NEW,
    MIN_ID_SEASON
)
WITH DELTA_VALUE AS (        
    SELECT MAX(DELTA_VALUE) AS DELTA_VALUE
    FROM DEMO_DB.DEMO_SCHEMA.AUDIT_INCREMENTAL_SOURCE_TABLE
    WHERE 1=1
        AND SOURCE = 'CENTRAL_SHARING_DB.DEMO_SCHEMA.V_DIM_ARTICLE'
        AND TARGET = 'DEMO_DB.DEMO_SCHEMA.FACT_PROCESS_RULE_STATUS'
    )
SELECT
    V_DIM_ARTICLE.ID_ARTICLE,
    V_DIM_ARTICLE.ID_BRAND,
    V_DIM_ARTICLE.ID_SECTION,
    V_DIM_ARTICLE.ID_SEASON,
    V_DIM_ARTICLE.ID_PRODUCT,
    CASE 
        WHEN V_DIM_ARTICLE.MODIFICATION_DATE >= DELTA_VALUE.DELTA_VALUE THEN TRUE
        ELSE FALSE
    END IS_NEW,
    CASE 
        WHEN IS_NEW THEN MIN(ID_SEASON) OVER(PARTITION BY IS_NEW)
        ELSE NULL
    END AS MIN_ID_SEASON
FROM CENTRAL_SHARING_DB.DEMO_SCHEMA.V_DIM_ARTICLE
JOIN DELTA_VALUE
WHERE 1=1
    AND V_DIM_ARTICLE.IS_LAST_VERSION = 1 
    AND V_DIM_ARTICLE.ID_ARTICLE <> -1
;

INSERT OVERWRITE INTO DEMO_DB.DEMO_SCHEMA.TMP_DIM_RAW
(
    ID_RAW,
    ID_BRAND,
    ID_SECTION,
    ID_SEASON,
    ID_PRODUCT,
    IS_NEW,
    MIN_ID_SEASON
)
WITH DELTA_VALUE AS (        
    SELECT MAX(DELTA_VALUE) AS DELTA_VALUE
    FROM DEMO_DB.DEMO_SCHEMA.AUDIT_INCREMENTAL_SOURCE_TABLE
    WHERE 1=1
        AND SOURCE = 'CENTRAL_SHARING_DB.DEMO_SCHEMA.V_DIM_RAW'
        AND TARGET = 'DEMO_DB.DEMO_SCHEMA.FACT_PROCESS_RULE_STATUS'
    )
SELECT 
    V_DIM_RAW.ID_RAW, 
    V_DIM_RAW.ID_BRAND, 
    V_DIM_RAW.ID_SECTION,
    V_DIM_RAW.ID_SEASON,
    V_DIM_RAW.ID_PRODUCT,
    CASE 
        WHEN V_DIM_RAW.MODIFICATION_DATE >= DELTA_VALUE.DELTA_VALUE THEN TRUE
        ELSE FALSE
    END IS_NEW,
    CASE 
        WHEN IS_NEW THEN MIN(ID_SEASON) OVER(PARTITION BY IS_NEW)
        ELSE NULL
    END AS MIN_ID_SEASON
FROM CENTRAL_SHARING_DB.DEMO_SCHEMA.V_DIM_RAW
JOIN DELTA_VALUE
WHERE 1=1
    AND V_DIM_RAW.IS_LAST_VERSION = 1
    AND V_DIM_RAW.ID_RAW <> -1
;

INSERT OVERWRITE INTO DEMO_DB.DEMO_SCHEMA.TMP_FACT_RAW_ORDER
(
    ID_ORDER,
    ID_RAW_MATERIAL_ORDER
)
SELECT 
    ID_ORDER,
    ID_RAW_MATERIAL_ORDER
FROM CENTRAL_SHARING_DB.DEMO_SCHEMA.V_FACT_RAW_ORDER
WHERE ID_ORDER <> -1
QUALIFY ROW_NUMBER() OVER (PARTITION BY ID_ORDER ORDER BY MODIFICATION_DATE DESC) = 1
;

INSERT OVERWRITE INTO DEMO_DB.DEMO_SCHEMA.TMP_DIM_ARTICLE_COLOR
(
    COD_ARTICLE,
    ID_ARTICLE,
    ID_COLOR
)
SELECT 
    NVL(COD_ARTICLE, -1) COD_ARTICLE,
    ID_ARTICLE,
    ID_COLOR
FROM CENTRAL_SHARING_DB.DEMO_SCHEMA.V_DIM_ARTICLE_COLOR
WHERE IS_LAST_VERSION = 1
;

-- INC. Actualizar IDs modificados 
IF (MODE = 'INCREMENTAL') THEN
    UPDATE DEMO_DB.DEMO_SCHEMA.FACT_PROCESS_RULE_STATUS AS TARGET
    SET
        ID_BRAND = SOURCE.ID_BRAND,
        ID_SECTION = SOURCE.ID_SECTION,
        ID_SEASON = SOURCE.ID_SEASON,
        ID_PRODUCT = SOURCE.ID_PRODUCT,
        MODIFICATION_DATE = CURRENT_TIMESTAMP(),
        MODIFICATION_USER = CURRENT_ROLE()
    FROM DEMO_DB.DEMO_SCHEMA.TMP_DIM_RAW AS SOURCE
    WHERE 1=1
        AND TARGET.ID_RAW = SOURCE.ID_RAW
        AND SOURCE.IS_NEW
        AND TARGET.ID_SEASON >= SOURCE.MIN_ID_SEASON
        AND (0=1
            OR TARGET.ID_BRAND <> SOURCE.ID_BRAND
            OR TARGET.ID_SECTION <> SOURCE.ID_SECTION
            OR TARGET.ID_SEASON <> SOURCE.ID_SEASON
            OR TARGET.ID_PRODUCT <> SOURCE.ID_PRODUCT    
        )
    ;

    CALL CENTRAL_DATA.MANAGEMENT.P_GET_ETL_JSON(LAST_QUERY_ID(), 'UPDATE', 'DEMO_DB.DEMO_SCHEMA.FACT_PROCESS_RULE_STATUS', :LOG_RESULT) INTO LOG_RESULT;


    UPDATE DEMO_DB.DEMO_SCHEMA.FACT_PROCESS_RULE_STATUS AS TARGET
    SET
        ID_BRAND = SOURCE.ID_BRAND,
        ID_SECTION = SOURCE.ID_SECTION,
        ID_SEASON = SOURCE.ID_SEASON,
        ID_PRODUCT = SOURCE.ID_PRODUCT,
        MODIFICATION_DATE = CURRENT_TIMESTAMP(),
        MODIFICATION_USER = CURRENT_ROLE()
    FROM DEMO_DB.DEMO_SCHEMA.TMP_DIM_ARTICLE AS SOURCE
    WHERE 1=1
        AND TARGET.ID_ARTICLE = SOURCE.ID_ARTICLE
        AND SOURCE.IS_NEW
        AND TARGET.ID_SEASON >= SOURCE.MIN_ID_SEASON
        AND (0=1
            OR TARGET.ID_BRAND <> SOURCE.ID_BRAND
            OR TARGET.ID_SECTION <> SOURCE.ID_SECTION
            OR TARGET.ID_SEASON <> SOURCE.ID_SEASON
            OR TARGET.ID_PRODUCT <> SOURCE.ID_PRODUCT    
        )
    ;

    CALL CENTRAL_DATA.MANAGEMENT.P_GET_ETL_JSON(LAST_QUERY_ID(), 'UPDATE', 'DEMO_DB.DEMO_SCHEMA.FACT_PROCESS_RULE_STATUS', :LOG_RESULT) INTO LOG_RESULT;

END IF;

-- 7. Persistir V_TRANSFORM_2
INSERT OVERWRITE INTO DEMO_DB.DEMO_SCHEMA.TMP_TRANSFORM_2_FACT_PROCESS_RULE_STATUS
(
    ID_PROCESS_RULE,
    ID_DOCUMENT_PROCESS,
    ID_COMPOSITION,
    ID_COMPOSITION_TYPE,
    ID_PRODUCT_ZONE,
    COD_ARTICLE, 
    ID_ARTICLE,
    ID_RAW,
    ID_COLOR,
    ID_DOCUMENT_TYPE,
    ID_SUPPLIER,
    ID_PROCESS_STATUS,
    ID_PROCESS_STATUS_REASON,
    ID_NEGOTIATION_ORDER,
    ID_ORDER,
    ID_BUYING_CENTER,
    ID_RULE_LEVEL,
    ID_SUSTAINABLE_MATERIAL,
    ID_SUSTAINABLE_MATERIAL_GROUP,
    DELIVERY_NUMBER,
    ORDER_NUMBER,
    ID_BRAND,
    ID_SECTION,
    ID_SEASON,
    ID_PRODUCT,
    ID_RAW_MATERIAL_ORDER,
    DEADLINE_DATE,
    DATE_CREATED,
    URGENT_DATE,
    IS_URGENT,
    IS_FIRST_ORDER,
    IS_MMPP,
    START_DATE,
    END_DATE,
    IS_ACTUAL,
    ID_SUBARTICLE,
    IS_SUBARTICLE,
    IS_MATERIAL_ANALYTICS_CANDIDATE,
    IS_SELF_DECLARATION,
    EVENT_METADATA,
    INGEST_DATE,
    ACTION,
    RANK_ORDER
)
SELECT
    ID_PROCESS_RULE,
    ID_DOCUMENT_PROCESS,
    ID_COMPOSITION,
    ID_COMPOSITION_TYPE,
    ID_PRODUCT_ZONE,
    COD_ARTICLE, 
    ID_ARTICLE,
    ID_RAW,
    ID_COLOR,
    ID_DOCUMENT_TYPE,
    ID_SUPPLIER,
    ID_PROCESS_STATUS,
    ID_PROCESS_STATUS_REASON,
    ID_NEGOTIATION_ORDER,
    ID_ORDER,
    ID_BUYING_CENTER,
    ID_RULE_LEVEL,
    ID_SUSTAINABLE_MATERIAL,
    ID_SUSTAINABLE_MATERIAL_GROUP,
    DELIVERY_NUMBER,
    ORDER_NUMBER,
    ID_BRAND,
    ID_SECTION,
    ID_SEASON,
    ID_PRODUCT,
    ID_RAW_MATERIAL_ORDER,
    DEADLINE_DATE,
    DATE_CREATED,
    URGENT_DATE,
    IS_URGENT,
    IS_FIRST_ORDER,
    IS_MMPP,
    START_DATE,
    END_DATE,
    IS_ACTUAL,
    ID_SUBARTICLE,
    IS_SUBARTICLE,
    IS_MATERIAL_ANALYTICS_CANDIDATE,
    IS_SELF_DECLARATION,
    EVENT_METADATA,
    INGEST_DATE,
    ACTION,
    RANK_ORDER
FROM DEMO_DB.DEMO_SCHEMA.V_TRANSFORM_2_FACT_PROCESS_RULE_STATUS
;

CALL CENTRAL_DATA.MANAGEMENT.P_GET_ETL_JSON(LAST_QUERY_ID(), 'INSERT', 'DEMO_DB.DEMO_SCHEMA.FACT_PROCESS_RULE_STATUS', :LOG_RESULT) INTO LOG_RESULT;


-- INC. Actualizar (caducar) datos que se modifican
IF (MODE = 'INCREMENTAL') THEN
    UPDATE DEMO_DB.DEMO_SCHEMA.FACT_PROCESS_RULE_STATUS AS TARGET
    SET
        END_DATE = SOURCE.START_DATE,
        IS_ACTUAL = 0,
        MODIFICATION_DATE = CURRENT_TIMESTAMP(),
        MODIFICATION_USER = CURRENT_ROLE()
    FROM DEMO_DB.DEMO_SCHEMA.TMP_TRANSFORM_2_FACT_PROCESS_RULE_STATUS AS SOURCE
    WHERE
        TARGET.ID_PROCESS_RULE = SOURCE.ID_PROCESS_RULE
        AND TARGET.IS_ACTUAL = 1
        AND SOURCE.RANK_ORDER = 1
    ;

    CALL CENTRAL_DATA.MANAGEMENT.P_GET_ETL_JSON(LAST_QUERY_ID(), 'UPDATE', 'DEMO_DB.DEMO_SCHEMA.FACT_PROCESS_RULE_STATUS', :LOG_RESULT) INTO LOG_RESULT;

END IF;

-- 8. Insertar en FACT
INSERT INTO DEMO_DB.DEMO_SCHEMA.FACT_PROCESS_RULE_STATUS
(
    ID_PROCESS_RULE,
    ID_DOCUMENT_PROCESS,
    ID_COMPOSITION,
    ID_COMPOSITION_TYPE,
    ID_PRODUCT_ZONE,
    COD_ARTICLE, 
    ID_ARTICLE,
    ID_RAW,
    ID_COLOR,
    ID_DOCUMENT_TYPE,
    ID_SUPPLIER,
    ID_PROCESS_STATUS,
    ID_PROCESS_STATUS_REASON,
    ID_NEGOTIATION_ORDER,
    ID_ORDER,
    ID_BUYING_CENTER,
    ID_RULE_LEVEL,
    ID_SUSTAINABLE_MATERIAL,
    ID_SUSTAINABLE_MATERIAL_GROUP,
    DELIVERY_NUMBER,
    ORDER_NUMBER,
    ID_BRAND,
    ID_SECTION,
    ID_SEASON,
    ID_PRODUCT,
    ID_RAW_MATERIAL_ORDER,
    DEADLINE_DATE,
    DATE_CREATED,
    URGENT_DATE,
    IS_URGENT,
    IS_FIRST_ORDER,
    IS_MMPP,
    START_DATE,
    END_DATE,
    IS_ACTUAL,
    ID_SUBARTICLE,
    IS_SUBARTICLE,
    IS_MATERIAL_ANALYTICS_CANDIDATE,
    IS_SELF_DECLARATION,
    EVENT_METADATA,
    INGEST_DATE,
    ACTION,
    LOAD_DATE,
    LOAD_USER,
    MODIFICATION_DATE,
    MODIFICATION_USER
)
SELECT 
    ID_PROCESS_RULE,
    ID_DOCUMENT_PROCESS,
    ID_COMPOSITION,
    ID_COMPOSITION_TYPE,
    ID_PRODUCT_ZONE,
    COD_ARTICLE, 
    ID_ARTICLE,
    ID_RAW,
    ID_COLOR,
    ID_DOCUMENT_TYPE,
    ID_SUPPLIER,
    ID_PROCESS_STATUS,
    ID_PROCESS_STATUS_REASON,
    ID_NEGOTIATION_ORDER,
    ID_ORDER,
    ID_BUYING_CENTER,
    ID_RULE_LEVEL,
    ID_SUSTAINABLE_MATERIAL,
    ID_SUSTAINABLE_MATERIAL_GROUP,
    DELIVERY_NUMBER,
    ORDER_NUMBER,
    ID_BRAND,
    ID_SECTION,
    ID_SEASON,
    ID_PRODUCT,
    ID_RAW_MATERIAL_ORDER,
    DEADLINE_DATE,
    DATE_CREATED,
    URGENT_DATE,
    IS_URGENT,
    IS_FIRST_ORDER,
    IS_MMPP,
    START_DATE,
    END_DATE,
    IS_ACTUAL,
    ID_SUBARTICLE,
    IS_SUBARTICLE,
    IS_MATERIAL_ANALYTICS_CANDIDATE,
    IS_SELF_DECLARATION,
    EVENT_METADATA,
    INGEST_DATE,
    ACTION,
    CURRENT_TIMESTAMP(),
    CURRENT_ROLE(),
    NULL,
    NULL
FROM DEMO_DB.DEMO_SCHEMA.TMP_TRANSFORM_2_FACT_PROCESS_RULE_STATUS
WHERE ACTION IN ('INSERT/UPDATE')
ORDER BY START_DATE;

CALL CENTRAL_DATA.MANAGEMENT.P_GET_ETL_JSON(LAST_QUERY_ID(), 'INSERT', 'DEMO_DB.DEMO_SCHEMA.FACT_PROCESS_RULE_STATUS', :LOG_RESULT) INTO LOG_RESULT;


-- 9. Insertar en Audit
INSERT INTO DEMO_DB.DEMO_SCHEMA.AUDIT_INCREMENTAL_SOURCE_TABLE (
    SOURCE,
    TARGET,
    DELTA_VALUE,
    MODIFICATION_DATE
) VALUES 
(
    'CENTRAL_SHARING_DB.DEMO_SCHEMA.V_DIM_ARTICLE',
    'DEMO_DB.DEMO_SCHEMA.FACT_PROCESS_RULE_STATUS',
    DATE_TRUNC('SECOND', :deltaValue),
    CURRENT_TIMESTAMP()
),
(
    'CENTRAL_SHARING_DB.DEMO_SCHEMA.V_DIM_RAW',
    'DEMO_DB.DEMO_SCHEMA.FACT_PROCESS_RULE_STATUS',
    DATE_TRUNC('SECOND', :deltaValue),
    CURRENT_TIMESTAMP()
)
;





CALL CENTRAL_DATA.MANAGEMENT.P_GET_ETL_JSON(LAST_QUERY_ID(), 'INSERT', 'DEMO_DB.DEMO_SCHEMA.AUDIT_INCREMENTAL_SOURCE_TABLE', :LOG_RESULT) INTO LOG_RESULT;
COMMIT;

IF (MODE = 'FULL') THEN
    ALTER TASK IF EXISTS DEMO_DB.DEMO_SCHEMA.TSK_LOAD_FACT_PROCESS_RULE_STATUS RESUME;
END IF;

CALL CENTRAL_DATA.MANAGEMENT.P_ETL_EVENT_END(:EVENT_ID, :STATE, :LOG_RESULT);
RETURN LOG_RESULT;

EXCEPTION
    WHEN STATEMENT_ERROR THEN
        BEGIN
            CALL LAST_QUERY_ID() INTO LAST_QUERY_ID;
            ROLLBACK;

            IF (MODE = 'FULL') THEN
                ALTER TASK IF EXISTS DEMO_DB.DEMO_SCHEMA.TSK_LOAD_FACT_PROCESS_RULE_STATUS RESUME;
            END IF;

            STATE := 'ERROR';
            CALL CENTRAL_DATA.MANAGEMENT.P_GET_ETL_EVENT_LOG_EXCEPTION(:LAST_QUERY_ID, :sqlerrm, :LOG_RESULT) INTO LOG_RESULT;
            CALL CENTRAL_DATA.MANAGEMENT.P_ETL_EVENT_END(:EVENT_ID, :STATE, :LOG_RESULT);
            RAISE;
        END;

END;
$$;