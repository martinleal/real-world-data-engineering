WITH LAST_EXECUTION_TIMESTAMP AS (
    SELECT 
        MAX(QUERY_START_TIME) AS QUERY_START_TIME
    FROM TABLE(
        DEMO_DB.INFORMATION_SCHEMA.TASK_HISTORY(
            result_limit => 100,
            task_name => 'TSK_LOAD_FACT_PROCESS_RULE_STATUS'
        ))
    WHERE STATE = 'SUCCEEDED'
), 
ORIGEN AS (
    SELECT DISTINCT 
        PAYLOAD:RULE.PROCESS_RULE_id AS ID_PROCESS_RULE,
        EVENT_PK,
        NVL(EVENT_DATE::TIMESTAMP_TZ, '0000-01-01') AS START_DATE,
        NVL(NEXT_EVENT_DATE::TIMESTAMP_TZ, '9999-12-31') AS END_DATE
    FROM SOURCE_DEMO_DB.SOURCE_DEMO_SCHEMA.SOURCE_DEMO_TABLE AS SOURCE
    JOIN LAST_EXECUTION_TIMESTAMP
    WHERE 1=1 
        AND EVENT_NAME <> 'RULEDelete'
        AND NOT(EQUAL_NULL(EVENT_DATE,NEXT_EVENT_DATE))
        AND SOURCE.INGEST_DATE BETWEEN 
            DATEADD(MONTH, -1, LAST_EXECUTION_TIMESTAMP.QUERY_START_TIME) 
            AND LAST_EXECUTION_TIMESTAMP.QUERY_START_TIME
), 
DESTINO AS (
    SELECT DISTINCT 
        ID_PROCESS_RULE,
        EVENT_METADATA:EVENT_PK::STRING AS EVENT_PK,
        START_DATE,
        END_DATE
    FROM DEMO_DB.DEMO_SCHEMA.FACT_PROCESS_RULE_STATUS AS TARGET
    JOIN LAST_EXECUTION_TIMESTAMP
    WHERE TARGET.INGEST_DATE BETWEEN 
            DATEADD(MONTH, -1, LAST_EXECUTION_TIMESTAMP.QUERY_START_TIME) 
            AND LAST_EXECUTION_TIMESTAMP.QUERY_START_TIME
), 
EVENTOS_ACTUALIZADOS AS (
    SELECT DISTINCT
        EVENT_PK
    FROM ORIGEN
    JOIN LAST_EXECUTION_TIMESTAMP
    WHERE 1=1
        AND END_DATE > LAST_EXECUTION_TIMESTAMP.QUERY_START_TIME 
        AND END_DATE < '9999-12-31'
),
CONTROL AS (
    SELECT 
        GREATEST(COUNT(O.*), COUNT(D.*)) AS TOTAL_VALIDATED, 
        SUM(
            CASE 
                WHEN 
                    (O.ID_PROCESS_RULE IS NULL OR D.ID_PROCESS_RULE IS NULL)
                THEN 1 
                ELSE 0 
            END) AS TOTAL_ERRORS, 
        (1-TOTAL_ERRORS/TOTAL_VALIDATED) AS ACCURACY, 
        ARRAY_AGG(
            CASE 
                WHEN 
                    (O.ID_PROCESS_RULE IS NULL OR D.ID_PROCESS_RULE IS NULL)
                THEN ARRAY_CONSTRUCT(
                    CASE 
                        WHEN O.ID_PROCESS_RULE IS NULL 
                        THEN 'DATO SOLO EN DESTINO'
                        ELSE 'DATO SOLO EN ORIGEN'
                    END,
                    NVL(O.EVENT_PK, D.EVENT_PK),
                    NVL(O.ID_PROCESS_RULE, D.ID_PROCESS_RULE),
                    NVL(O.START_DATE, D.START_DATE),
                    NVL(O.END_DATE, D.END_DATE)
                    ) 
            END) AS ERRORS
    FROM ORIGEN O
    FULL OUTER JOIN DESTINO D ON (
        O.ID_PROCESS_RULE = D.ID_PROCESS_RULE AND
        O.START_DATE = D.START_DATE AND
        O.END_DATE = D.END_DATE
    )
    WHERE 1=1
        AND NVL(O.EVENT_PK, '-1') NOT IN (SELECT EVENT_PK FROM EVENTOS_ACTUALIZADOS)
        AND NVL(D.EVENT_PK, '-1') NOT IN (SELECT EVENT_PK FROM EVENTOS_ACTUALIZADOS)
)
SELECT
    OBJECT_CONSTRUCT (
        'METADATA', OBJECT_CONSTRUCT
        (
            'CHECK_TYPE', 'CONSISTENCY',
            'SOURCE_TABLE', 'SOURCE_DEMO_DB.SOURCE_DEMO_SCHEMA.SOURCE_DEMO_TABLE',
            'TARGET_TABLE', 'DEMO_DB.DEMO_SCHEMA.FACT_PROCESS_RULE_STATUS',
            'KEY_COLUMNS', ARRAY_CONSTRUCT('ID_PROCESS_RULE', 'START_DATE', 'END_DATE'),
            'TOTAL_VALIDATED', TOTAL_VALIDATED,
            'TOTAL_ERRORS', TOTAL_ERRORS,
            'CRITICALITY', 'MODERATE',
            'THRESHOLD', 100,
            'ACCURACY', ACCURACY
        ),
        'ERRORS', ARRAY_SLICE(ERRORS, 0, 100)
    ) AS REASON,
    CASE 
        WHEN ARRAY_SIZE(ERRORS) > 0 THEN 'KO' 
        ELSE 'OK' 
    END AS RESULT
FROM CONTROL;